{
    "EXAMPLE": "Example",
    "INPUT_PLACEHOLDER": "Add any text...",
    "DEMO": "Demo",
    "ALERT_INTRO": "Baboon provides a service with a directive to display information to the user. For this, a box will be temporarily displayed in the UI. On the methods and parameters of the service can be controlled content and appearance of the alarm box.",
    "ALERT_INFO": "info: Provides a simple note to the information of the user.",
    "ALERT_SUCCESS": "success: Delivers a message for the successful completion of a process.",
    "ALERT_WARN": "warning: Delivers a striking warning.",
    "ALERT_DANGER": "danger: Provides a alarm message for heavier errors.",
    "ALERT_CLOSE": "close: Hides the message box again.",
    "ALERT_MESSAGE": "The message parameter contains the message to be displayed.",
    "API_LINK_DESCRIPTION": "For more Details please check out our",
    "API_LINK_TEXT": "api reference",
    "RESET_TEXT": "The bbc-reset directive adds an icon to reset the model of an input field and also empties the view value of the input field. The directive can only be applied to the following input types:",
    "SORT_TEXT": "The bbc sort directive adds a column for custom or server-side sorting to a table.",
    "SORT_CITY": "City",
    "SORT_COUNTRY": "Country",
    "RADIO_TEXT": "The bbc-radio directive creates a radio button with the same look and feel on all browsers.",
    "CACHE_INTRO": "With the cache factory offers baboon is a simple variant to store objects in the memory.",
    "PAGER_TEXT": "The bbc pager directive adds a pager for custom or server-side paging.",
    "SESSION_INTRO": "Sessions are produced in Baboon from the server and managed with the parameters from the config.js. The module bbc.session includes a service that can interact on the server with the session. Which can be used to report to the server activity and to store data from the client in the session.",
    "SESSION_LIST_HEADER": "Methods of the Session Services",
    "SESSION_LIST_1": "Report activity session",
    "SESSION_LIST_2": "Check Recent Activity",
    "SESSION_LIST_3": "Store data in the session",
    "SESSION_LIST_4": "Load data from the session",
    "SESSION_LIST_5": "Delete data from the session",
    "SESSION_SETACTIVITY_HEADER": "Reports new activity to the server",
    "SESSION_SETACTIVITY_TEXT": "Report activity on the server. The server checks the session on inactivity and maximum service life. If one of these times are exceeded, the server sends the client in the callback an error. If the session ok, the server uses the current server time and stores it as the last activity.",
    "SESSION_GETLASTACTIVITY_HEADER": "Check Latest activity session",
    "SESSION_GETLASTACTIVITY_TEXT": "The last activity of the session to query. The session will not be checked again and set no new activity. It is returned a formatted in ISO date string.",
    "SESSION_SETDATA_HEADER": "Store data in the Session Container",
    "SESSION_SETDATA_TEXT": "You can save on the session service from the client data in the server session. Baboon used to store the container in the session data. All data from the client are stored within the container session.data and can be read and deleted only from this. Is the Key in the session already exists, the old value is overwritten.",
    "SESSION_GETDATA_HEADER": "Read data from the session container",
    "SESSION_GETDATA_TEXT": "You can read out data from the server session using the session service by the client. Use the key with which you have the data stored. You can import data that are outside of the container, do not read.",
    "SESSION_GETDATA_TEXT2": "If you do not enter a key, you the entire session container object is returned.",
    "SESSION_DELETEDATA_HEADER": "Delete data from the Session Container",
    "SESSION_DELETEDATA_TEXT": "The session service can delete from the client data from the server session. Use the key under which you have saved the data. You can import data that are outside of the container, do not delete.",
    "SESSION_DELETEDATA_TEXT2": "If you do not enter a key, the entire session container object is deleted.",
    "MARKDOWN_TEXT": "Converts markdown to HTML.",
    "CHECKBOX_INTRO": "With the checkbox directive baboon provides a checkbox that looks in all supported browsers equal and has the same behavior.",
    "DATEPICKER_INTRO": "The datepicker directive is a calendar component. Through them, you can enter valid date values in an input box on easy way. The values can be inline as well as on the calender popup be entered.",
    "DATEPICKER_FEATURES": "The datepicker has many advantages.",
    "DATEPICKER_FEATURE_1": "It allows only valid date values​​.",
    "DATEPICKER_FEATURE_2": "The format for the date entry can be chosen freely.",
    "DATEPICKER_FEATURE_3": "It looks the same in all supported browsers.",
    "DATEPICKER_FEATURE_4": "It has the same behavior in all supported browsers.",
    "DATEPICKER_FEATURE_5": "The popup is native to use by renouncing nested menus.",
    "DATE": "Date",
    "FLOAT_INTRO": "Baboon provides a directive which converts the input string into a number and rounds the number. Can not be converted to a number undefined is returned. A decimal comma is replaced by a decimal point.",
    "INLINE_INTRO": "Baboon provides the service $bbcInlineEdit, which makes it possible to reset objects after changes. The objects can be populated with validation errors.",
    "INLINE_DESCRIPTION": "The service keeps the data in the model. When creating the models, the model-data are stored in the master. This allows the model reset back to its original data and determine changes to the model.",
    "INLINE_METHOD_ISUNCHANGED": "isChanged: Check if the model has changes.",
    "INLINE_METHOD_POPVALIDATION": "populateValidation: Add server validation to form.",
    "INLINE_METHOD_RESET": "reset: Resets the model to the master.",
    "INLINE_METHOD_SETMODEL": "setModel: Create a model and set master.",
    "MODAL_TEXT": "The module bbc.modal includes a service which can display popup and message boxes. This service is based on the modal Directive of ",
    "MODAL_LIST_HEADER": "Methods of the modal service",
    "MODAL_LIST_OPEN": "Opens a modal window",
    "MODAL_LIST_CANCEL": "Closes a modal window",
    "MODAL_LIST_UPDATE": "Updates a message in an opened modal window",
    "MODAL_OPEN_TEXT": "The open method opens a modal window, and sets the properties, such as Title bar, body, and which buttons should be displayed.",
    "MODAL_CANCEL_TEXT": "The method cancel closes a modal window.",
    "MODAL_UPDATE_TEXT": "The method update updates the message in an open modal window.",
    "MODAL_YES_NO_TEXT": "Yes/No Popup",
    "MODAL_OK_CLOSE_TEXT": "Ok/Close",
    "MODAL_OK_TEXT": "Modal Popup",
    "MODAL_CANCEL_DEMO_TEXT": "One second after opening the popup, it closes automatically.",
    "MODAL_UPDATE_DEMO_TEXT": "Two seconds after the opening of the popup the message is updated.",
    "MODAL_HEADLINE": "Title bar",
    "MODAL_MESSAGE_BODY": "The message text.",
    "MODAL_YES_TEXT": "Yes",
    "MODAL_NO_TEXT": "No",
    "MODAL_CLOSE_TEXT": "Close",
    "MODAL_CLICKED_TEXT": "has been clicked",
    "MODAL_UPDATED_MESSAGE": "The updated message is now available.",
    "TRANSPORT_INTRO": "Baboon uses a single API for transport via socket or http/https, whereas the socket is default. If the socket gets disabled or disconnected the requests are switched automatically to http/https. In the config socket can be set to disabled, so all transport is done over http/https.",
    "TRANSPORT_LIST_HEADER": "Methods of the transport service",
    "TRANSPORT_LIST_1": "Fires an event to socket or post request to the server",
    "TRANSPORT_LIST_2": "Forwards an event to a scope",
    "TRANSPORT_LIST_3": "Register an event on the socket",
    "TRANSPORT_LIST_4": "Adds a listener on the socket",
    "TRANSPORT_LIST_5": "Removes a listener from the socket",
    "NAVIGATION_DIRECTIVE_INTRO": "The navigation directive displays the navigation links in horizontal or vertical alignment. The current active action is selected.",
    "NAVIGATION_SERVICE_INTRO": "The navigation service provides an api for returning navigation elements of main and sub navigations as either list or tree. With the use of paremters the navigation elements can be filtered.",
    "NAVIGATION_LIST_HEADER": "Methods of navigation service",
    "NAVIGATION_LIST_1": "Gets the current app",
    "NAVIGATION_LIST_2": "Gets the current app route",
    "NAVIGATION_LIST_3": "Gets the navigation tree",
    "NAVIGATION_LIST_4": "Gets the navigation as a flat list",
    "NAVIGATION_LIST_5": "Gets the toplevel of navigation",
    "NAVIGATION_LIST_6": "Gets all sub links from application as tree",
    "NAVIGATION_LIST_7": "Get all sub links from application as list",
    "INTEGER_INTRO": "The integer-directive transforms the input to an integer value. If the entry not a valid integer will return null or undefined.",
    "METHODS": "Methods",
    "FORM_SAVE": "Save",
    "FORM_RESET": "Reset",
    "FORM_FIRSTNAME": "Firstname",
    "FORM_LASTNAME": "Lastname",
    "FORM_LASTNAME_REQ": "Lastname is required.",
    "FORM_TEXT": "The module bbc.form includes a service which simplifies working with forms. This service provides functionality for caching, handle server errors, check changes and reset the model.",
    "FORM_LIST_HEADER": "Methods of the form service",
    "FORM_LIST_HASLOADED": "Load model from cache",
    "FORM_HASLOADED_TEXT": "Tries to load the model from cache based on the passed key. If no key is passed, the model name is used to find the model. If the model is not in the cache, it returns false, true otherwise.",
    "FORM_LIST_UNCHANGED": "Check model for changes",
    "FORM_UNCHANGED_TEXT": "The method isUnchanged checks the current object with the copy from cache for changes. If there are no changes, it returns false, true otherwise.",
    "FORM_LIST_POPULATE": "Map server validation for the form",
    "FORM_POPULATE_TEXT": "The method populateValidation maps the server validation to the form",
    "FORM_LIST_RESET": "Reset the model",
    "FORM_RESET_TEXT": "The reset method resets the model to the original state. The current model will be overwritten with the original copy from the cache.",
    "FORM_LIST_SET": "Set the model",
    "FORM_SET_TEXT": "The setModel method adds the given object to the cache and creates a deep copy to preserve the original. With reset cache, the cache for the object is deleted.",
    "FORM_INIT_HEADER": "Initialize $bbcModal",
    "FORM_INIT_TEXT": "The Modalservice will be initialized with the model name and a key, which is a property of the model. If the key specified, its model value is used as the key for the cache, otherwise the model name will be used.",

    "HOME_INSTALL": "Install",
    "HOME_INTRO": "Baboon-Client is a client library ",
    "HOME_INTRO2": "It also has different directives to simplify tasks in client web development.",
    "HOME_API": "API Documentation",
    "HOME_GUIDE": "Developer Guide",
    "HOME_INSTALL_TEXT": "The installation of Baboon-Client is very simple. However, some preparatory work is needed.",
    "HOME_DEPS": "Global dependencies",
    "HOME_CREATE_START": "Create and start your Baboon-Client project",
    "HOME_CREATE_START_TEXT": "Usual baboon-client standard installation over bower registry",
    "BOWER_LINK": "Learn more about usage of Bower",
    "HOME_CONTRIBUTING": "Contributing",
    "HOME_CONTRIBUTING_P1_1": "Instead of us handing out a formal style guide, simply stick to the existing programming style. Please create descriptive commit messages. We use a git hook to validate the commit messages against these",
    "HOME_CONTRIBUTING_P1_2": "rules",
    "HOME_CONTRIBUTING_P1_3": "Easily expand Baboon-Client with your own extensions or changes in the functionality of Baboon-Client itself. Use this workflow",
    "HOME_CONTRIBUTING_LI1": "Write your functionality",
    "HOME_CONTRIBUTING_LI2": "Write unit tests for your functionality",
    "HOME_CONTRIBUTING_LI3": "Create an example of your functionality in the guide",
    "HOME_CONTRIBUTING_LI4": "Document your functionality in the documentation section of the guide",
    "HOME_CONTRIBUTING_LI5": "All tests should be successful",
    "HOME_CONTRIBUTING_LI6": "Check your test coverage",
    "HOME_CONTRIBUTING_LI7": "Make a pull request",
    "HOME_CONTRIBUTING_LAST": "We will check the tests, the example and test coverage. In case your changes are useful and well tested, we will merge your requests.",
    "HOME_BUILD_TEST": "Building and Testing Baboon-Client",
    "HOME_BUILD_TEST_TEXT": "This section describes how to set up your development environment to build and test Baboon-Client with the guide.",
    "HOME_GLOBAL_DEPS": "Global dependencies",
    "HOME_CLONE": "Clone Baboon-Client and guide",
    "HOME_CLONE_P1": "The guide is also the reference implementation for Baboon-Client. Clone Baboon-Client repository and install the dependent modules with npm and bower.",
    "HOME_CLONE_P2": "Clone the baboon-client repository and install the dev dependencies and test suite deps. Test baboon-client with grunt.",
    "HOME_CLONE_P3": "Alternate you can use the update script",
    "HOME_TESTS": "Running tests",
    "HOME_TESTS_P1": "You can run all unit tests for Baboon-Client with",
    "HOME_COVERAGE": "Running coverage",
    "HOME_COVERAGE_P1": "You can run a coverage task for Baboon-Client with",
    "HOME_CI": "Running tests for ci systems",
    "HOME_CI_P1": "You can run unit tests, jshint and code coverage for ci systems with",
    "HOME_GEN_DOC": "Generate Documentation",
    "HOME_GEN_DOC_P1": "You can generate the documentation for baboon-client with",
    "HOME_GUIDE_DOC": "Running guide and documentation",
    "HOME_GUIDE_DOC_P1": "You can start the node application and run the guide under http://localhost:3000.",
    "HOME_AUTHOR": "Author",
    "HOME_LICENSE": "License"
}